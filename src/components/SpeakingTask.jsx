import { useState } from 'react';
import { Mic, MicOff, CheckCircle, Volume2 } from 'lucide-react';

function SpeakingTask({ task, onComplete }) {
  const [isRecording, setIsRecording] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [feedback, setFeedback] = useState('');
  const [isCompleted, setIsCompleted] = useState(false);

  const startRecording = () => {
    // Here you would typically initialize the speech recognition API
    setIsRecording(true);
    // Simulate recording for demo purposes
    setTimeout(() => {
      setTranscript('This is a simulated transcript of your speech. In a real application, this would be generated by the speech recognition API.');
      setIsRecording(false);
    }, 3000);
  };

  const stopRecording = () => {
    setIsRecording(false);
    // Here you would typically stop the speech recognition API
  };

  const handleComplete = () => {
    // Here you would typically send the transcript to an API for feedback
    setFeedback('Great pronunciation! Your speech was clear and well-paced. Keep practicing!');
    setIsCompleted(true);
    onComplete();
  };

  const speak = (text) => {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'en-US';
    speechSynthesis.speak(utterance);
  };

  return (
    <div className="card">
      <div className="mb-6">
        <div className="flex items-center space-x-2 mb-4">
          <Volume2 className="w-6 h-6 text-blue-500" />
          <h2 className="text-2xl font-bold">Speaking Task</h2>
        </div>
        <p className="text-lg text-gray-600 dark:text-gray-300 mb-4">{task}</p>
        <button
          onClick={() => speak(task)}
          className="btn-secondary"
        >
          <Volume2 className="w-5 h-5 mr-2" />
          Listen to Task
        </button>
      </div>

      <div className="mb-6">
        <div className="flex justify-center mb-4">
          <button
            onClick={isRecording ? stopRecording : startRecording}
            className={`btn-primary ${
              isRecording ? 'bg-red-500 hover:bg-red-600' : ''
            }`}
          >
            {isRecording ? (
              <>
                <MicOff className="w-5 h-5 mr-2" />
                Stop Recording
              </>
            ) : (
              <>
                <Mic className="w-5 h-5 mr-2" />
                Start Recording
              </>
            )}
          </button>
        </div>

        {transcript && (
          <div className="p-4 bg-gray-50 rounded-lg border-2 border-gray-200">
            <h3 className="text-lg font-semibold text-gray-700 mb-2">Your Speech</h3>
            <p className="text-gray-600">{transcript}</p>
          </div>
        )}
      </div>

      {transcript && !isCompleted && (
        <div className="flex justify-center">
          <button
            onClick={handleComplete}
            className="btn-primary"
          >
            <CheckCircle className="w-5 h-5 mr-2" />
            Submit Recording
          </button>
        </div>
      )}

      {feedback && (
        <div className="mt-8 p-6 bg-green-50 rounded-lg border-2 border-green-200">
          <div className="flex items-start space-x-3">
            <CheckCircle className="w-6 h-6 text-green-500 mt-1" />
            <div>
              <h3 className="text-lg font-semibold text-green-700 mb-2">Feedback</h3>
              <p className="text-green-600">{feedback}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default SpeakingTask; 